// <auto-generated />
using System;
using CoderChallenge.Infrastructure.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoderChallenge.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251026235350_Migration3")]
    partial class Migration3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoderChallenge.Domain.Entities.DroneEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dataCriacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataDestruicao")
                        .HasColumnType("datetime")
                        .HasColumnName("dataDestruicao");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fabricante");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("marca");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("numeroSerie");

                    b.Property<string>("PaisOrigem")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paisOrigem");

                    b.Property<string>("localizacao_id")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_drones_ativo");

                    b.HasIndex("NumeroSerie")
                        .IsUnique()
                        .HasDatabaseName("idx_drones_numeroSerie");

                    b.HasIndex("PaisOrigem")
                        .HasDatabaseName("idx_drones_paisOrigem");

                    b.HasIndex("localizacao_id");

                    b.ToTable("Drones", (string)null);
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.LocalizacaoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cidade");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pais");

                    b.Property<string>("PontoReferenciaConhecido")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pontoReferenciaConhecido");

                    b.Property<string>("precisao_id")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Pais")
                        .HasDatabaseName("idx_localizacoes_pais");

                    b.HasIndex("precisao_id");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("idx_localizacoes_coordenadas");

                    b.ToTable("Localizacoes", (string)null);
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.PatoPrimordialEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<float>("AlturaCm")
                        .HasColumnType("float")
                        .HasColumnName("alturaCm");

                    b.Property<int?>("BatimentosCardiacosBpm")
                        .HasColumnType("int")
                        .HasColumnName("batimentosCardiacosBpm");

                    b.Property<DateTime>("DataCatalogacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dataCatalogacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DroneOrigemId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("droneOrigem_id");

                    b.Property<float>("PesoG")
                        .HasColumnType("float")
                        .HasColumnName("pesoG");

                    b.Property<int>("QuantidadeMutacoes")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeMutacoes");

                    b.Property<string>("StatusHibernacao")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("statusHibernacao");

                    b.Property<string>("UnidadeAltura")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unidadeAltura");

                    b.Property<string>("UnidadePeso")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unidadePeso");

                    b.Property<string>("localizacao_id")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("superpoder_id")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("DroneOrigemId")
                        .HasDatabaseName("idx_patos_droneOrigem");

                    b.HasIndex("QuantidadeMutacoes")
                        .HasDatabaseName("idx_patos_quantidadeMutacoes");

                    b.HasIndex("StatusHibernacao")
                        .HasDatabaseName("idx_patos_statusHibernacao");

                    b.HasIndex("localizacao_id");

                    b.HasIndex("superpoder_id");

                    b.ToTable("PatosPrimordiais", (string)null);
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.PrecisaoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("UnidadeOriginal")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unidadeOriginal");

                    b.Property<float>("Valor")
                        .HasColumnType("float")
                        .HasColumnName("valor");

                    b.Property<float>("ValorEmMetros")
                        .HasColumnType("float")
                        .HasColumnName("valorEmMetros");

                    b.HasKey("Id");

                    b.HasIndex("ValorEmMetros")
                        .HasDatabaseName("idx_valorEmMetros");

                    b.ToTable("Precisoes", (string)null);
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.SuperpoderEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Classificacoes")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("classificacoes");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_superpoderes_nome");

                    b.ToTable("Superpoderes", (string)null);
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.DroneEntity", b =>
                {
                    b.HasOne("CoderChallenge.Domain.Entities.LocalizacaoEntity", "Localizacao")
                        .WithMany()
                        .HasForeignKey("localizacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localizacao");
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.LocalizacaoEntity", b =>
                {
                    b.HasOne("CoderChallenge.Domain.Entities.PrecisaoEntity", "Precisao")
                        .WithMany()
                        .HasForeignKey("precisao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Precisao");
                });

            modelBuilder.Entity("CoderChallenge.Domain.Entities.PatoPrimordialEntity", b =>
                {
                    b.HasOne("CoderChallenge.Domain.Entities.DroneEntity", null)
                        .WithMany()
                        .HasForeignKey("DroneOrigemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoderChallenge.Domain.Entities.LocalizacaoEntity", "Localizacao")
                        .WithMany()
                        .HasForeignKey("localizacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoderChallenge.Domain.Entities.SuperpoderEntity", "Superpoder")
                        .WithMany()
                        .HasForeignKey("superpoder_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Localizacao");

                    b.Navigation("Superpoder");
                });
#pragma warning restore 612, 618
        }
    }
}
